# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1")`}.h"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define 
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if(${1:/* condition */})
	{
		${2:/* code */}
	}
snippet el
	else
	{
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do
	{
		${2:/* code */}
	}
	while (${1:/* condition */});
# While Loop
snippet wh
	while(${1:/* condition */})
	{
		${2:/* code */}
	}
# For Loop
snippet for
	for(${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for(${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
	{
		${5:/* code */}
	}
# Switch made by Noxbru
snippet sw
	switch(${1})
	{
		case ${2}:
			${3:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }
	{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr},"${2:%s}\n"${3});${4}
# sprintf made by Noxbru
snippet spr
	sprintf(${1},"${2:%s}\n"${3});${4}
# scanf made by Noxbru
snippet sf
	scanf("${1:%s}\n",&${2});${3}
# fscanf made by Noxbru
snippet fsf
	fscanf(${1},"${2:%s}\n",&${3});${4}
# sscanf made by Noxbru
snippet ssf
	sscanf(${1},"${2:%s}\n",&${3});${4}
snippet .
	[${1}]${2}
snippet un
	unsigned
# GNU GPL license
snippet gpl
	/* This program is free software: you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation, either version 3 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
	 * 
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */
# the argument structure
snippet args
	typedef struct args_t
	{
		${1:first argument}
	} args;${2}
# little argument handler by Noxbru
snippet argh
	void *arghandler(int argc, const char *argv[])
	{
		int i;
		args a;
		${1:initialize default values of a}
		for(i = 1; i < argc; i++)
		{
			if(!strcmp(argv[i],"-h"))
				${2:usage(argv[0]);}
			else if(!strcmp(argv[i],"${3}"))
			{
				${4:/* code */}
			}
			else $2
		}
		return a;
	}
# snippet for the usage explanation by Noxbru
snippet usage
	void usage(const char *name)
	{
		fprintf(stderr,"USAGE:");
		fprintf(stderr,"  %s ${1:[OPTIONS]}\n",name);
		fprintf(stderr,"\n");
		fprintf(stderr,"${2:OPTIONS:}\n");
		fprintf(stderr,"  -h\tshow this help\n");
		fprintf(stderr,"  -${3}\t ${4}\n");${5}
		exit(1);
	}
